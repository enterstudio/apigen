#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "apigen/lang/nodes.rb"
  require "apigen/lang/lexer.rb"

class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 65)

  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end

  def next_token
    @tokens = [] unless @tokens
    @tokens.shift
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    14,    13,    15,    20,    12,    14,    13,    15,    17,    12,
    29,    28,     4,    19,    20,    16,    23,    24,    25,    26,
    27,     5,    30,    31 ]

racc_action_check = [
     3,     3,     3,    14,     3,     6,     6,     6,     5,     6,
    24,    24,     0,    12,    13,     4,    15,    20,    21,    22,
    23,     1,    29,    30 ]

racc_action_pointer = [
     3,    21,   nil,    -3,     5,     8,     2,   nil,   nil,   nil,
   nil,   nil,     0,     2,    -9,     3,   nil,   nil,   nil,   nil,
     9,     5,     6,     7,    -1,   nil,   nil,   nil,   nil,    16,
    11,   nil ]

racc_action_default = [
    -1,   -18,    -2,    -3,   -18,   -18,    -4,    -5,    -7,    -8,
    -9,   -10,   -18,   -18,   -18,   -18,   -17,    32,    -6,   -11,
   -18,   -18,   -18,   -18,   -18,   -14,   -15,   -16,   -12,   -18,
   -18,   -13 ]

racc_goto_table = [
     7,    21,    22,    18,     6,     3,     2,     1 ]

racc_goto_check = [
     5,    10,    10,     5,     4,     3,     2,     1 ]

racc_goto_pointer = [
   nil,     7,     6,     5,     1,    -3,   nil,   nil,   nil,   nil,
   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     8,     9,    10,    11,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 15, :_reduce_1,
  1, 15, :_reduce_2,
  1, 16, :_reduce_3,
  2, 16, :_reduce_4,
  1, 18, :_reduce_5,
  2, 18, :_reduce_6,
  1, 19, :_reduce_7,
  1, 19, :_reduce_8,
  1, 19, :_reduce_9,
  1, 19, :_reduce_10,
  2, 23, :_reduce_11,
  3, 24, :_reduce_12,
  5, 24, :_reduce_13,
  3, 20, :_reduce_14,
  3, 21, :_reduce_15,
  3, 22, :_reduce_16,
  2, 17, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 32

racc_token_table = {
  false => 0,
  :error => 1,
  :PARAM => 2,
  :QUERY => 3,
  :PATH => 4,
  :HEADER => 5,
  :OPTIONAL => 6,
  :NAME => 7,
  :TYPE => 8,
  :METHOD => 9,
  :URL => 10,
  :COLON => 11,
  :BRACE => 12,
  :IDENTIFIER => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PARAM",
  "QUERY",
  "PATH",
  "HEADER",
  "OPTIONAL",
  "NAME",
  "TYPE",
  "METHOD",
  "URL",
  "COLON",
  "BRACE",
  "IDENTIFIER",
  "$start",
  "program",
  "expressions",
  "method_with_url",
  "param_list",
  "param",
  "path_param",
  "query_param",
  "header_param",
  "endpoint_name",
  "type_structure" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_2(val, _values, result)
     result = Nodes.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_3(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_4(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_5(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_6(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_7(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_8(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_9(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_10(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_11(val, _values, result)
     result = NameNode.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_12(val, _values, result)
     result = TypeNode.new val[1], true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_13(val, _values, result)
     result = TypeNode.new val[1], false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_14(val, _values, result)
     result = PathNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_15(val, _values, result)
     result = QueryNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_16(val, _values, result)
     result = HeaderNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_17(val, _values, result)
     result = UrlMethod.new val[0], val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
