#!/usr/bin/env ruby
require 'thor'
require 'apigen/apigen.rb'
require 'apigen/config/config_reader.rb'
require 'apigen/log.rb'

class ApigenCLI < Thor

  DEFAULT_FILE = './apigen.json'

  desc "generate [FILENAME:optional]",
    "Reads file config locted at [FILENAME] and generates clients. By default the config file is
    located at ./apigen.json"
  def generate(config_path=DEFAULT_FILE)
    Log.init level: Logger::DEBUG

    @apigen = Apigen.new
    config_file = File.read config_path
    reader = ConfigReader.parse config_file
    reader.endpoints.each do |endpoint|
      input = endpoint[:input]
      if File.exists? input
        program = File.read input
        @apigen.generate program, endpoint[:generators]
      else
        Log.e "File #{input} not found. Check your config file."
      end
    end
  end

  desc 'g [FILENAME:optional]',"equivalent to 'generate'"
  alias :g :generate

  desc "generate:config [FILENAME:optional]",
    "Generates an example configuration file in the given path"
  def generate_config(config_path=DEFAULT_FILE)
    Log.init level: Logger::DEBUG
    json = """
{
  \"endpoints\":[
    {
      \"input\":\"some/file.rb\",
      \"generators\":[
        {
          \"require\":\"./lib/generation/simple_generator.rb\",
          \"out\":\"./pkg/out_file.txt\",
          \"class\":\"SimpleGenerator\"
        }
      ]
    }
  ]
}
"""
    File.open config_path, 'w' do |f|
      f.write json
    end

    Log.i "wrote #{json.bytes.size} bytes to #{config_path}"
  end

  desc 'parse_config [FILENAME:optional]', "Reads the config file and outputs it's contents to stdout."
  long_desc <<-LONG_DESC
  This method provides useful info when debugging your config file.
  If the FILENAME param is not passed to parse_config, parse_config will try to read from ./apigen.json
  LONG_DESC
  def parse_config(config_path=DEFAULT_FILE)
    Log.init level: Logger::DEBUG
    config = File.read config_path
    config_reader = ConfigReader.parse config
    endpoints = config_reader.endpoints
    Log.d "input: #{endpoints.size} endpoints detected:"
    endpoints.each do |endpoint|
      puts endpoint[:input]
      endpoint[:generators].each do |generator|
        Log.d "  #{generator.inspect}"
      end
    end
  end
end

ApigenCLI.start ARGV
